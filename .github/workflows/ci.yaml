name: CI

on:
  push:
    branches:
      - main
  pull_request:

defaults:
  run:
    shell: bash --noprofile --norc -euxo pipefail {0}

jobs:

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          script/install.sh "sudo apt-get install -y gnustep-devel"
          script/install.sh "sudo dpkg --add-architecture i386; sudo apt-get update; sudo apt-get install -y libc6:i386 gcc-multilib"
          script/install.sh "sudo apt-get install -y ruby"
          script/install.sh "sudo apt-get install -y ghc"
          script/install.sh "sudo apt-get install -y mono-mcs mono-devel mono-complete mono-vbnc fsharp"
          script/install.sh "mkdir scala && curl -fsSL https://github.com/scala/scala3/releases/download/3.4.1/scala3-3.4.1.tar.gz | tar xz -C scala --strip-components 1 --warning=no-unknown-keyword"; echo "$PWD/scala/bin" >> "$GITHUB_PATH"
          script/install.sh "curl -fsSL https://sh.rustup.rs | sudo sh -s -- -y"; echo "$HOME/.cargo/bin" >> "$GITHUB_PATH"
          script/install.sh "mkdir swift && curl -fsSL https://download.swift.org/swift-5.7-release/ubuntu2004/swift-5.7-RELEASE/swift-5.7-RELEASE-ubuntu20.04.tar.gz | tar xz -C swift --strip-components 1"; echo "$PWD/swift/usr/bin" >> "$GITHUB_PATH"
          script/install.sh "curl -fsSL -o kotlinc.zip https://github.com/JetBrains/kotlin/releases/download/v1.9.23/kotlin-compiler-1.9.23.zip && unzip -q kotlinc.zip"; echo "$PWD/kotlinc/bin" >> "$GITHUB_PATH"
          script/install.sh "sudo apt-get install -y groovy"
          script/install.sh "curl -fsSL -o dmd.deb https://s3.us-west-2.amazonaws.com/downloads.dlang.org/releases/2022/dmd_2.100.2-0_amd64.deb && sudo dpkg -i dmd.deb"
          script/install.sh "sudo apt-get install -y gnu-smalltalk"
          script/install.sh "sudo apt-get install -y php5"
          script/install.sh "curl -fsSLO https://packages.erlang-solutions.com/erlang-solutions_1.0_all.deb; sudo dpkg -i erlang-solutions_1.0_all.deb; sudo apt-get update"
          script/install.sh "sudo apt-get install -y erlang"
          script/install.sh "sudo apt-get install -y elixir"
          script/install.sh "sudo apt-get install -y r-base"
          script/install.sh "curl -fsSL http://dist.crystal-lang.org/apt/setup.sh | sudo bash; sudo apt-get install -y crystal"
          script/install.sh "mkdir nim && curl -fsSL https://nim-lang.org/download/nim-2.0.2-linux_x64.tar.xz | tar xJ -C nim --strip-components 1"; echo "$PWD/nim/bin" >> "$GITHUB_PATH"
          script/install.sh "sudo npm install -g bower"
          script/install.sh "sudo npm install -g coffeescript"
          script/install.sh "sudo npm install -g livescript"
          script/install.sh "sudo npm install -g typescript ts-node @types/node"
          script/install.sh "sudo npm install -g purescript pulp"
          script/install.sh "mkdir j && curl -fsSL http://www.jsoftware.com/download/j903/install/j903_linux64.tar.gz | tar xz -C j --strip-components 1"; echo "$PWD/j/bin" >> "$GITHUB_PATH"
          script/install.sh "sudo apt-get install -y gauche"
          script/install.sh "sudo apt-get install -y ocaml"
          script/install.sh "curl -fsSL -o src/clojure/clojure-1.8.0.jar https://repo1.maven.org/maven2/org/clojure/clojure/1.8.0/clojure-1.8.0.jar"
          script/install.sh "mkdir zig && curl -fsSL https://ziglang.org/builds/zig-linux-x86_64-0.12.0-dev.3563+129de47a7.tar.xz | tar xJ -C zig --strip-components 1"; echo "$PWD/zig" >> "$GITHUB_PATH"
          script/install.sh "PATH=$HOME/.local/share/ponyup/bin:$PATH; curl -fsSL https://raw.githubusercontent.com/ponylang/ponyup/latest-release/ponyup-init.sh | sh && ponyup update ponyc release"; echo "$HOME/.local/share/ponyup/bin" >> "$GITHUB_PATH"

      - name: Build
        run: make build

      - name: Test
        run: make test

      - name: Clean up
        run: make clean

      - name: Output result
        run: cat result.txt
